{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Nuxeo Presales Demo Template - Not using Nuxify",

  "Parameters": {
    "DnsName": {
      "Description": "(REQUIRED) Host prefix (e.g. you enter 'mydemo', the host will be 'mydemo.cloud.nuxeo.com')",
      "Type": "String",
      "AllowedPattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]))*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
      "MinLength": 1,
      "ConstraintDescription": "Please specify a valid DNS host prefix"
    },
    "InstanceType": {
      "Description": "Type of EC2 instance.  If you plan to install Arender, t3.medium is too small",
      "Type": "String",
      "Default": "t3.medium",
      "AllowedValues": [
        "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge",
        "m4.large", "m4.xlarge",
        "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge",
        "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.8xlarge"
      ]
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access",
      "Type": "String",
      "MinLength": 1,
      "ConstraintDescription": "Please specify a key pair"
    },
    "NuxeoChannel": {
      "Type": "String",
      "Default": "Release",
      "AllowedValues": ["Release", "Snapshot"],
      "Description": "The channel to use"
    },
    "GitBranch": {
      "Type": "String",
      "Default": "master",
      "Description": "https://github.com/nuxeo/presales-vmdemo repository branch"
    },
    "Customer": {
      "Type": "String",
      "Description": "Prospect name, or 'generic' if this is a generic demo",
      "MinLength": 1,
      "ConstraintDescription": "Please specify a customer"
    },
    "StudioProject": {
      "Type": "String",
      "Description": "The Nuxeo Studio project name (MUST be accessible by 'nuxeo_presales' user)"
    },
    "StudioVersion": {
      "Type": "String",
      "Default": "0.0.0-SNAPSHOT",
      "Description": "The Nuxeo Studio version (used with Release in Studio to install a different version)"
    },
    "AutoStart": {
      "AllowedValues": [ "true", "false" ],
      "Default": "true",
      "Description": "Auto-start the Nuxeo runtime; if false, log into your instance to start Nuxeo",
      "Type": "String"
    },
    "ImageType": {
      "AllowedValues": [ "Cloud", "LTS" ],
      "Default": "Cloud",
      "Description": "Select which image to use, either Cloud (private/licensed image) or LTS (public image)",
      "Type": "String"
    },
    "RPMs": {
      "Type": "String",
      "Description": "Additional RPM packages that should be installed, ok to leave empty"
    },
    "Contact": {
      "Type": "String",
      "Default": "wwpresales@nuxeo.com",
      "Description": "Contact email address"
    },
    "DiskSize": {
      "Type": "Number",
      "Default": 10,
      "Description": "Disk size (in GB) for root volume of EC2 instance. If you plan to install ARender, 40GB should be a minimum"
    },
    "UseS3Bucket": {
      "AllowedValues": ["Shared", "Create", "None"],
      "Default": "Shared",
      "Description": "Use a 'Shared' bucket or 'Create' a new S3 bucket for this stack, otherwise use 'None' to disable bucket creation",
      "Type": "String"
    }
  },

  "Conditions": {
    "CreateS3Bucket": {
      "Fn::Equals": [{
        "Ref": "UseS3Bucket"
      }, "Create"]
    },
    "ShareS3Bucket": {
      "Fn::Equals": [{
        "Ref": "UseS3Bucket"
      }, "Shared"]
    },
    "UseS3": {
      "Fn::Or": [{
        "Condition": "CreateS3Bucket"
      }, {
        "Condition": "ShareS3Bucket"
      }]
    }
  },

  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-west-1": {
        "64": "ami-0b6246086351c53ed"
      },
      "us-west-2": {
        "64": "ami-0bedf48efbb8f047d"
      },
      "us-east-1": {
        "64": "ami-02cbdfc5aa4c3433b"
      },
      "eu-west-1": {
        "64": "ami-03e733ee9c2f6e1ec"
      },
      "ap-northeast-1": {
        "64": "ami-0113602ade1a985e7"
      }
    },
    "AWSRegionSubnet": {
      "ap-northeast-1": {
        "vpc": "vpc-73016014",
        "subnet": "subnet-f3daebba"
      },
      "eu-west-1": {
        "vpc": "vpc-5420e830",
        "subnet": "subnet-dbc879bf"
      },
      "us-east-1": {
        "vpc": "vpc-01311a6a321841d60",
        "subnet": "subnet-0d192be7ed6d2faa2"
      },
      "us-west-1": {
        "vpc": "vpc-420fa925",
        "subnet": "subnet-5d71ff06"
      },
      "us-west-2": {
        "vpc": "vpc-0e6cdc3402852ec63",
        "subnet": "subnet-070006c83fad19822"
      }
    }
  },

  "Resources": {
    "NuxeoInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [{
          "Fn::GetAtt": ["NuxeoSecurity", "GroupId"]
        }],
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sda1",
          "Ebs": {
            "VolumeSize": {
              "Ref": "DiskSize"
            }
          }
        }],
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "SubnetId": {
          "Fn::FindInMap": ["AWSRegionSubnet", {
            "Ref": "AWS::Region"
          }, "subnet"]
        },
        "Tags": [{
            "Key": "contact",
            "Value": {
              "Ref": "Contact"
            }
          },
          {
            "Key": "environment",
            "Value": "dev"
          },
          {
            "Key": "cfTemplateVersion",
            "Value": "1.0.0"
          },
          {
            "Key": "billing-category",
            "Value": "presales"
          },
          {
            "Key": "billing-subcategory",
            "Value": {
              "Ref": "Customer"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "dnsName",
            "Value": {
              "Ref": "DnsName"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": [
              "#!/bin/bash\n\nwget https://raw.githubusercontent.com/nuxeo/presales-vmdemo/${branch}/AWS-templates/Nuxeo_${channel}_presales\necho export UPLOAD_ROLE_ARN=${uploadRole} STACK_ID=${stack} DNS_NAME=${dnsName} REGION=${region} S3BUCKET=${bucket} NX_BRANCH=${branch} NX_STUDIO=${studio} NX_STUDIO_VER=${studioVer} AUTO_START=${autoStart} IMAGE_TYPE=${imageType} INSTALL_RPM=${rpms} >> /etc/profile.d/load_env.sh\nbash Nuxeo_${channel}_presales\n",
              {
                "stack": {
                  "Ref": "AWS::StackName"
                },
                "dnsName": {
                  "Ref": "DnsName"
                },
                "region": {
                  "Ref": "AWS::Region"
                },
                "channel": {
                  "Ref": "NuxeoChannel"
                },
                "bucket": {
                  "Ref": "UseS3Bucket"
                },
                "branch": {
                  "Ref": "GitBranch"
                },
                "studio": {
                  "Ref": "StudioProject"
                },
                "studioVer": {
                  "Ref": "StudioVersion"
                },
                "autoStart": {
                  "Ref": "AutoStart"
                },
                "imageType": {
                  "Ref": "ImageType"
                },
                "rpms": {
                  "Ref": "RPMs"
                },
                "uploadRole": {
                  "Fn::If": [
                    "UseS3",
                    {
                      "Fn::GetAtt": ["UploadRole", "Arn"]
                    },
                    "false"
                  ]
                }
              }
            ]
          }
        }
      }
    },

    "NuxeoSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::FindInMap": ["AWSRegionSubnet", {
            "Ref": "AWS::Region"
          }, "vpc"]
        },
        "GroupDescription": "Allow ports 22 (SSH), 80 (HTTP) and 443 (HTTPS)",
        "SecurityGroupIngress": [{
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },

    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },

    "InstanceSharedResourcePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": ["${name}-shared-resource-instance-policy", {
            "name": {
              "Ref": "AWS::StackName"
            }
          }]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Action": "s3:ListAllMyBuckets",
              "Resource": ["arn:aws:s3:::*"]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:GetObject"
              ],
              "Resource": [
                "arn:aws:s3:::presales-instance-resources",
                "arn:aws:s3:::presales-instance-resources/*",
                "arn:aws:s3:::dam-demo-assets",
                "arn:aws:s3:::dam-demo-assets/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "textract:DetectDocumentText",
                "comprehend:*",
                "rekognition:DetectLabels",
                "rekognition:DetectText",
                "rekognition:RecognizeCelebrities",
                "rekognition:GetCelebrityInfo"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:GetSecretValue",
              "Resource": ["arn:aws:secretsmanager:us-west-2:311032021612:secret:connect_shared_presales_credential-D1gcYT",
                "arn:aws:secretsmanager:us-west-2:311032021612:secret:kibana_default_password-klGGXN",
                "arn:aws:secretsmanager:us-west-2:311032021612:secret:workmail_default_password-RLzJRZ"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:DescribeImages",
                "ecr:BatchGetImage"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },

    "UploadRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "UseS3",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "AWS": [{
                "Fn::GetAtt": ["InstanceRole", "Arn"]
              }]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },

    "SharedS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShareS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": ["${name}-s3-instance-policy", {
            "name": {
              "Ref": "AWS::StackName"
            }
          }]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:GetBucketObjectLockConfiguration",
                "s3:GetBucketVersioning"
              ],
              "Resource": [{
                "Fn::Join": ["", ["arn:aws:s3:::", {
                  "Ref": "AWS::Region"
                }, "-demo-bucket"]]
              }]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:PutObjectRetention",
                "s3:PutObjectLegalHold"
              ],
              "Resource": [{
                "Fn::Join": ["", ["arn:aws:s3:::", {
                  "Ref": "AWS::Region"
                }, "-demo-bucket/", {
                  "Ref": "AWS::StackName"
                }, "/*"]]
              }, {
                "Fn::Join": ["", ["arn:aws:s3:::", {
                  "Ref": "AWS::Region"
                }, "-demo-bucket/s3DirectUpload/*"]]
              }]
            }
          ]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },

    "SharedS3UploadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShareS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": ["${name}-direct-upload-policy", {
            "name": {
              "Ref": "AWS::StackName"
            }
          }]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": [{
              "Fn::Join": ["", ["arn:aws:s3:::", {
                "Ref": "AWS::Region"
              }, "-demo-bucket/", {
                "Ref": "AWS::StackName"
              }, "/upload/*"]]
            }]
          }]
        },
        "Roles": [{
          "Ref": "UploadRole"
        }]
      }
    },

    "CreateS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "CreateS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": ["${name}-s3-instance-policy", {
            "name": {
              "Ref": "AWS::StackName"
            }
          }]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:GetBucketObjectLockConfiguration",
                "s3:GetBucketVersioning"
              ],
              "Resource": [{
                "Fn::Join": ["", ["arn:aws:s3:::", {
                  "Ref": "S3Bucket"
                }]]
              }]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:PutObjectRetention",
                "s3:PutObjectLegalHold"
              ],
              "Resource": [{
                "Fn::Join": ["", ["arn:aws:s3:::", {
                  "Ref": "S3Bucket"
                }, "/*"]]
              }]
            }
          ]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },

    "CreateS3UploadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "CreateS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": ["${name}-direct-upload-policy", {
            "name": {
              "Ref": "AWS::StackName"
            }
          }]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": [{
              "Fn::Join": ["", ["arn:aws:s3:::", {
                "Ref": "S3Bucket"
              }, "/upload/*"]]
            }]
          }]
        },
        "Roles": [{
          "Ref": "UploadRole"
        }]
      }
    },

    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateS3Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": ["${name}-bucket", {
            "name": {
              "Ref": "AWS::StackName"
            }
          }]
        },
        "Tags": [{
            "Key": "contact",
            "Value": {
              "Ref": "Contact"
            }
          },
          {
            "Key": "billing-category",
            "Value": "presales"
          },
          {
            "Key": "billing-subcategory",
            "Value": {
              "Ref": "Customer"
            }
          }
        ],
        "CorsConfiguration": {
          "CorsRules": [{
            "AllowedHeaders": ["*"],
            "AllowedMethods": ["GET", "HEAD", "PUT", "POST"],
            "AllowedOrigins": [{
              "Fn::Sub": ["https://${name}.cloud.nuxeo.com", {
                "name": {
                  "Ref": "DnsName"
                }
              }]
            }],
            "ExposedHeaders": ["ETag", "Content-Disposition"]
          }]
        }
      }
    }
  }
}