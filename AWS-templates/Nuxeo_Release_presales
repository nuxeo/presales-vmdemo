#!/bin/bash

# Installation can take time.
# You can tail -F /var/log/nuxeo_install.log to see basic install progress
# You can tail -F /var/log/syslog to see the full startup and check for errors

source /etc/profile.d/load_env.sh

# Variables for installation
INSTALL_LOG="/var/log/nuxeo_install.log"

COMPOSE_REPO="https://github.com/nuxeo-sandbox/nuxeo-presales-docker"
COMPOSE_DIR="/home/ubuntu/nuxeo-presales-docker"

NUXEO_BASE_DIR="/var/lib/nuxeo"
NUXEO_CONF_DIR="${NUXEO_BASE_DIR}/conf"
NUXEO_DATA_DIR="${NUXEO_BASE_DIR}/data"
NUXEO_LOG_DIR="${NUXEO_BASE_DIR}/log"
NUXEO_ENV="${COMPOSE_DIR}/.env"

STUDIO_USERNAME="nuxeo_presales"

TEMPLATES="default,mongodb"

MONGO_VERSION="4.4"
ELASTIC_VERSION="7.9.3"

# Start of installation script

echo "Nuxeo Presales Installation Script Starting [${STACK_ID}]" > ${INSTALL_LOG}

# Check configured image
FROM_IMAGE="docker.packages.nuxeo.com/nuxeo/nuxeo:latest"
if [ -z "${IMAGE_TYPE}" ]; then
  echo "Upstream image is not set, using: ${FROM_IMAGE}" | tee -a ${INSTALL_LOG}
else
  # TODO - Configure Cloud Image
  echo "Upstream image: ${IMAGE_TYPE} => ${FROM_IMAGE}" | tee -a ${INSTALL_LOG}
fi

# Check DNS Name
if [ -z "${DNS_NAME}" ]; then
  DNS_NAME=${STACK_ID}
  echo "Warning: DNS Name is not set, using stack id: ${STACK_ID}" | tee -a ${INSTALL_LOG}
fi

# Fully qualified domain name
FQDN="${DNS_NAME}.cloud.nuxeo.com"

# Set the hostname & domain
echo "${DNS_NAME}" > /etc/hostname
hostname ${DNS_NAME}
echo "Domains=cloud.nuxeo.com" >> /etc/systemd/resolved.conf

# Install Nuxeo
echo "Nuxeo Presales Installation Script: Install Nuxeo" | tee -a ${INSTALL_LOG}

# Make directories and clone compose stack
mkdir -p ${COMPOSE_DIR} ${NUXEO_CONF_DIR} ${NUXEO_DATA_DIR} ${NUXEO_LOG_DIR}
git clone ${COMPOSE_REPO} ${COMPOSE_DIR}
echo "Nuxeo Presales Installation Script: Install Nuxeo => DONE" | tee -a ${INSTALL_LOG}

echo "Nuxeo Presales Installation Script: Configure Nuxeo" | tee -a ${INSTALL_LOG}
# Link old log location to new
ln -s ${NUXEO_LOG_DIR} /var/log/nuxeo

# Copy default conf.d files
cp ${COMPOSE_DIR}/conf.d/*.conf ${NUXEO_CONF_DIR}

# Secrets for instance
MAIL_PASS=$(aws secretsmanager get-secret-value --secret-id workmail_default_password --region us-west-2 | jq -r '.SecretString|fromjson|.workmail_default_password')

# Support old style of creating a bucket
S3_BUCKET="${STACK_ID}-bucket"
S3_PREFIX="binary_store/"
S3_UPLOAD_PREFIX="upload/"

if [[ "${S3BUCKET}" == "Shared" ]]; then
  S3_BUCKET="${REGION}-demo-bucket"
  S3_PREFIX="${STACK_ID}/binary_store/"
  S3_UPLOAD_PREFIX="${STACK_ID}/upload/"
fi

AUTO_PACKAGES="nuxeo-web-ui marketplace-disable-studio-snapshot-validation"
if [[ "${S3BUCKET}" == "true" || "${S3BUCKET}" == "Create" || "${S3BUCKET}" == "Shared" ]]; then
  AUTO_PACKAGES="${AUTO_PACKAGES} amazon-s3-online-storage"
fi

# Write system configuration
cat << EOF > ${NUXEO_CONF_DIR}/system.conf
# Host Configuration
session.timeout=600
nuxeo.url=https://${FQDN}/nuxeo

# Templates
nuxeo.templates=${TEMPLATES}

# Mail Configuration
mail.transport.password=${MAIL_PASS}
mail.transport.host=smtp.mail.us-east-1.awsapps.com
mail.transport.port=465
mail.transport.user=no-reply@nuxeo-demo.awsapps.com
mail.transport.auth=true
mail.from=no-reply@nuxeo-demo.awsapps.com
mail.smtp.ssl.enable=true
mail.transport.protocol=smtps
nuxeo.notification.eMailSubjectPrefix=[Nuxeo]

# S3 Configuration
nuxeo.s3storage.useDirectUpload=true
nuxeo.s3storage.directdownload.expire=3600
nuxeo.s3storage.directdownload=true

nuxeo.s3storage.bucket=${S3_BUCKET}
nuxeo.s3storage.bucket_prefix=${S3_PREFIX}
nuxeo.s3storage.region=${REGION}
nuxeo.s3storage.transient.roleArn=${UPLOAD_ROLE_ARN}
nuxeo.s3storage.transient.bucket=${S3_BUCKET}
nuxeo.s3storage.transient.bucket_prefix=${S3_UPLOAD_PREFIX}
EOF

# Register the nuxeo instance
echo "$(date) Configure Studio Project [${NX_STUDIO}]" | tee -a ${INSTALL_LOG}

STUDIO_PACKAGE=""
if [ -z "${NX_STUDIO_VER}" ]; then
  NX_STUDIO_VER="0.0.0-SNAPSHOT"
fi
if [ -n "${NX_STUDIO}" ]; then
  STUDIO_PACKAGE="${NX_STUDIO}-${NX_STUDIO_VER}"
fi

# Set working environment
CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id connect_shared_presales_credential --region us-west-2 | jq -r '.SecretString|fromjson|.connect_presales_pwd')
cat << EOF > ${NUXEO_ENV}
APPLICATION_NAME=${NX_STUDIO}
NUXEO_IMAGE=${FROM_IMAGE}
NUXEO_DEV=true
NUXEO_INSTALL_HOTFIX=true
NUXEO_PORT=8080
NUXEO_PACKAGES=${STUDIO_PACKAGE} ${AUTO_PACKAGES} ${NUXEO_PACKAGES}

INSTALL_RPM=${INSTALL_RPM}

ELASTIC_VERSION=${ELASTIC_VERSION}
MONGO_VERSION=${MONGO_VERSION}

STUDIO_USERNAME=${STUDIO_USERNAME}
STUDIO_CREDENTIALS=${CREDENTIALS}
EOF
# Make env not as hidden
ln -s ${NUXEO_ENV} ${COMPOSE_DIR}/env

# Fix up permissions
chmod -R g+w ${NUXEO_BASE_DIR}
chown -R nuxeo:ubuntu ${NUXEO_BASE_DIR}
chown -R ubuntu:ubuntu ${COMPOSE_DIR}

# Auto-start if Studio project defined
if [ -n "${NX_STUDIO}" ]; then
  echo "Registering Nuxeo..." | tee -a ${INSTALL_LOG}
  # Home required by 'docker'
  export HOME="/home/ubuntu"
  cd ${COMPOSE_DIR}
  # Use the source image to register the project
  docker pull --quiet ${FROM_IMAGE} 2>&1 | tee -a ${INSTALL_LOG}
  docker run -v /var/lib/nuxeo/:/var/lib/nuxeo/:rw ${FROM_IMAGE} \
         nuxeoctl register "${STUDIO_USERNAME}" "${NX_STUDIO}" "dev" "Docker" "${CREDENTIALS}" 2>&1 | tee -a ${INSTALL_LOG}
  if [ -e /var/lib/nuxeo/instance.clid ]; then
    echo -n "NUXEO_CLID=" >> ${NUXEO_ENV}
    awk 1 ORS="--" /var/lib/nuxeo/instance.clid >> ${NUXEO_ENV}
    echo "" >> ${NUXEO_ENV}
  fi

  # Build / Pull images
  echo "Creating Dockerfile(s)" | tee -a ${INSTALL_LOG}
  make dockerfiles NUXEO_IMAGE=${FROM_IMAGE} ELASTIC_VERSION=${ELASTIC_VERSION}
  echo "Building images..." | tee -a ${INSTALL_LOG}
  docker-compose --no-ansi build --progress plain 2>&1 | tee -a ${INSTALL_LOG}
  echo "Pulling other images..." | tee -a ${INSTALL_LOG}
  docker-compose --no-ansi pull
  if [[ "${AUTO_START}" == "true" ]]; then
    echo "Starting Nuxeo stack" | tee -a ${INSTALL_LOG}
    docker-compose --no-ansi up --detach --no-color 2>&1 | tee -a ${INSTALL_LOG}
  fi
fi
echo "Nuxeo Presales Installation Script: Configure Nuxeo => DONE" | tee -a ${INSTALL_LOG}

echo "Nuxeo Presales Installation Script: Install Misc." | tee -a ${INSTALL_LOG}
# Update some defaults
update-alternatives --set editor /usr/bin/vim.basic
echo "Nuxeo Presales Installation Script: Install Misc. => DONE" | tee -a ${INSTALL_LOG}

# Configure reverse-proxy
cat << EOF > /etc/apache2/sites-available/nuxeo.conf
<VirtualHost _default_:80>
    ServerName  ${FQDN}
    CustomLog /var/log/apache2/nuxeo_access.log combined
    ErrorLog /var/log/apache2/nuxeo_error.log
    Redirect permanent / https://${FQDN}/
</VirtualHost>

<VirtualHost _default_:443 >

    ServerName  ${FQDN}

    CustomLog /var/log/apache2/nuxeo_access.log combined
    ErrorLog /var/log/apache2/nuxeo_error.log

    DocumentRoot /var/www

    ProxyRequests   Off
     <Proxy * >
        Order allow,deny
        Allow from all
     </Proxy>

    <Location /kibana>
      AuthUserFile /etc/apache2/passwords
      AuthName authorization
      AuthType Basic
      require valid-user
    </Location>

    RewriteEngine   On
    RewriteRule ^/$ /nuxeo/ [R,L]
    RewriteRule ^/nuxeo$ /nuxeo/ [R,L]
    RewriteRule ^/kibana$ /kibana/ [R,L]

    ProxyPass           /nuxeo/         http://localhost:8080/nuxeo/
    ProxyPass           /ARender/       http://localhost:8080/ARender/
    ProxyPass           /kibana/        http://localhost:5601/kibana/
    ProxyPassReverse    /nuxeo/         http://localhost:8080/nuxeo/
    ProxyPassReverse    /ARender/       http://localhost:8080/ARender/
    ProxyPassReverse    /kibana/        http://localhost:5601/kibana/
    ProxyPreserveHost   On

    # WSS
    ProxyPass         /_vti_bin/     http://localhost:8080/_vti_bin/
    ProxyPass         /_vti_inf.html http://localhost:8080/_vti_inf.html
    ProxyPassReverse  /_vti_bin/     http://localhost:8080/_vti_bin/
    ProxyPassReverse  /_vti_inf.html http://localhost:8080/_vti_inf.html

    RequestHeader   append nuxeo-virtual-host "https://${FQDN}/"

    # Retain TLS1.1 for backwards compatibility until Jan 2020
    # These must be *after* the Certbot entry
    #XXX SSLProtocol all -SSLv2 -SSLv3 -TLSv1
    # SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
    # Enable high ciphers for 3rd party security scanners
    #XXX SSLCipherSuite HIGH:!aNULL:!MD5:!3DES

    ## BEGIN SUPINT-655 ##
    <Location "/nuxeo/incl">
      RewriteRule .* - [R=404,L,NC]
    </Location>
    ## END SUPINT-655 ##
</VirtualHost>
EOF

# Add gzip compression for the REST API
cat > /etc/apache2/mods-available/deflate.conf <<EOF
<IfModule mod_deflate.c>
        <IfModule mod_filter.c>
                # these are known to be safe with MSIE 6
                AddOutputFilterByType DEFLATE text/html text/plain text/xml

                # everything else may cause problems with MSIE 6
                AddOutputFilterByType DEFLATE text/css
                AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/ecmascript
                AddOutputFilterByType DEFLATE application/rss+xml
                AddOutputFilterByType DEFLATE application/xml
                AddOutputFilterByType DEFLATE application/json
        </IfModule>
</IfModule>
EOF

a2enmod proxy proxy_http rewrite ssl headers
a2dissite 000-default
a2ensite nuxeo

KIBANA_PASS=$(aws secretsmanager get-secret-value --secret-id kibana_default_password --region us-west-2 | jq -r '.SecretString|fromjson|.kibana_default_password')
htpasswd -b -c /etc/apache2/passwords kibana "${KIBANA_PASS}"
apache2ctl -k graceful

# Enable SSL certs
echo "Nuxeo Presales Installation Script: Enable Certbot Certificate" | tee -a ${INSTALL_LOG}
certbot -q --apache --redirect --hsts --uir --agree-tos -m wwpresales@nuxeo.com -d ${FQDN} | tee -a ${INSTALL_LOG}

echo "Nuxeo Presales Installation Script: Setup profile, ubuntu, etc." | tee -a ${INSTALL_LOG}

#fix imagemagick Policy
#wget https://raw.githubusercontent.com/nuxeo/presales-vmdemo/${NX_BRANCH}/ImageMagick/policy.xml -O /etc/ImageMagick-6/policy.xml

#set up ubuntu user
cat << EOF >> /home/ubuntu/.profile
export TERM="xterm-color"
export PS1='\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ '
export COMPOSE_DIR=${COMPOSE_DIR}
alias dir='ls -alFGh'
alias hs='history'
alias mytail='nxl'
alias vilog='stack vilog'
alias mydu='du -sh */'

alias dcb='docker-compose build'
alias dcdn='docker-compose down'
alias dce='docker-compose exec'
alias dck='docker-compose kill'
alias dcl='docker-compose logs'
alias dclf='docker-compose logs -f'
alias dco=docker-compose
alias dcps='docker-compose ps'
alias dcpull='docker-compose pull'
alias dcr='docker-compose run'
alias dcrestart='docker-compose restart'
alias dcrm='docker-compose rm'
alias dcstart='docker-compose start'
alias dcstop='docker-compose stop'
alias dcup='docker-compose up'
alias dcupd='docker-compose up -d'

alias stack='make -e -f ${COMPOSE_DIR}/Makefile'
alias nx='stack SERVICE=nuxeo'
alias nxl='nx logs'
alias nxenv='vim ${COMPOSE_DIR}/.env'
alias nxconf='vim ${NUXEO_CONF_DIR}/system.conf'
alias nuxeo='nx exec COMMAND=bash'
alias es='stack SERVICE=elasticsearch'
alias mongodb='stack SERVICE=mongo'
alias mongo='stack exec SERVICE=mongo COMMAND=mongo'

figlet $DNS_NAME.cloud.nuxeo.com
EOF

# Set up vim for ubuntu user
cat << EOF > /home/ubuntu/.vimrc
" Set the filetype based on the file's extension, but only if
" 'filetype' has not already been set
au BufRead,BufNewFile *.conf setfiletype conf
EOF
echo "Nuxeo Presales Installation Script: Setup profile, ubuntu, etc. => DONE" | tee -a ${INSTALL_LOG}

echo "Nuxeo Presales Installation Script Complete" | tee -a ${INSTALL_LOG}
